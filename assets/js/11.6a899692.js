(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{517:function(e,t,a){"use strict";a.r(t);var r=a(6),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("In this article, I will present the basic scalable web application architecture, frontend backend separation architecture, master/worker architecture with AWS infrastructure.")]),e._v(" "),a("p",[e._v("Some abbreviations:")]),e._v(" "),a("ul",[a("li",[e._v("ASG: Auto Scaling Group")]),e._v(" "),a("li",[e._v("SG: Security Group")]),e._v(" "),a("li",[e._v("LB: Load Balancer")]),e._v(" "),a("li",[e._v("IGW: Internet Gateway")])]),e._v(" "),a("h1",{attrs:{id:"basic-scalable-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-scalable-architecture"}},[e._v("#")]),e._v(" Basic Scalable Architecture")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/y4h2/y4h2.github.io/imagebed/img/blog/20210326002044.png",alt:""}})]),e._v(" "),a("ul",[a("li",[e._v("The application is running on EC2 instances\n"),a("ul",[a("li",[e._v("The scalability is based on AWS ASG (Auto Scaling Group)")]),e._v(" "),a("li",[e._v("Set up Security Group\n"),a("ul",[a("li",[e._v("Only allow trusted IP to access EC2 through 22 SSH. (Or set up a jumpbox and connect through SSH tunnel)")]),e._v(" "),a("li",[e._v("Expose application's port to LB")])])])])]),e._v(" "),a("li",[e._v("Storage: Deploy MySQL on RDS (For more scalability, you could choose Aurora or Serverless RDS)\n"),a("ul",[a("li",[e._v("Only allow APP SG to access RDS through 3306")])])]),e._v(" "),a("li",[e._v("Network\n"),a("ul",[a("li",[e._v("Data Flow: it decides how we debug when an error happens\n"),a("ul",[a("li",[e._v("User -> Route53 -> LB -> APP")])])]),e._v(" "),a("li",[e._v("All resources should locate within VPC 10.0.0.0/16")]),e._v(" "),a("li",[e._v("Route Table:\n"),a("ul",[a("li",[e._v("10.0.0.0/16 traffic should be routed to internal VPC")]),e._v(" "),a("li",[e._v("All other IP addresses should be redirected to IGW,  through IGW to reach the public network.")]),e._v(" "),a("li",[e._v("If we only want to access public IP but don't want to be accessed from outside, we could use NAT to replace IGW.")])])])])])]),e._v(" "),a("h1",{attrs:{id:"frontend-backend-separation-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontend-backend-separation-architecture"}},[e._v("#")]),e._v(" Frontend Backend Separation Architecture")]),e._v(" "),a("p",[e._v("Frontend Backend Separation Architecture is a popular pattern. In this case, a frontend website is built with React.js/Vue.js as a Single Page Application (SPA). SPA itself is a static website, and it will fetch all data through accessing backend API. In that case, we could host the frontend and backend separately.\nWe could still use the above architecture as the backend solution and host the frontend page on S3 + CloudFront.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/y4h2/y4h2.github.io/imagebed/img/blog/20210326002143.png",alt:""}})]),e._v(" "),a("ul",[a("li",[e._v("When we update frontend code, CI should build and pack resources and upload them to S3.")]),e._v(" "),a("li",[e._v("CloudFront acts as a CDN for our S3 files.")])]),e._v(" "),a("h1",{attrs:{id:"extend-backend-master-worker-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extend-backend-master-worker-architecture"}},[e._v("#")]),e._v(" Extend Backend: Master Worker Architecture")]),e._v(" "),a("p",[e._v("When we need to handle a large amount of async jobs, we could involve the Master/worker pattern. In this architecture, AWS SQS is an ideal connector between master instances and workers.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/y4h2/y4h2.github.io/imagebed/img/blog/20210326002202.png",alt:""}})])])}),[],!1,null,null,null);t.default=n.exports}}]);